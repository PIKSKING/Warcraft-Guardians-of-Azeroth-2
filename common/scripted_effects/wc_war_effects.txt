shatter_realm_effect = {
	leave_or_break_any_pol_faction_effect = yes
	custom_description = {
		text = shatter_realm_tooltip
		
		save_temporary_scope_as = target
		
		# Finds kingdoms
		every_realm_de_jure_kingdom = {
			limit = {
				# If controls at least 8 counties
				any_in_de_jure_hierarchy = {
					count >= 8
					continue = {
						tier > tier_county
					}
					exists = this
					tier = tier_county
					exists = holder
					holder.top_liege = scope:target
				}
			}
			# If there's existing kingdom, it tries to claim lands
			if = {
				limit = {
					exists = holder
					NOT = { holder.top_liege = scope:target }
					exists = holder.capital_province
				}
				add_to_temporary_list = claiming_kingdoms
			}
			# Otherwise, if there's claimant, they try to claim lands
			else_if = {
				limit = {
					any_claimant = {
						exists = this
					}
				}
				add_to_temporary_list = claimed_kingdoms
			}
		}
		
		# Marks existing kingdoms that may claim some land
		every_in_list = {
			list = claiming_kingdoms
			
			save_temporary_scope_as = target_kingdom
			
			# Occupies lands in radius of capital
			holder = { occupies_close_realm_of_effect = { target = scope:target kingdom = scope:target_kingdom } }
		}
		
		# Marks not-existing kingdoms and finds claimant
		every_in_list = {
			list = claimed_kingdoms
			
			save_temporary_scope_as = target_kingdom
			title_capital_county = { save_temporary_scope_as = kingdom_capital }
			
			ordered_claimant = {
				order_by = worthy_claimant_values
				max = 1
				
				save_temporary_scope_as = worthy_claimant
				
				create_title_and_vassal_change = {
					type = conquest_populist
					save_scope_as = change
					add_claim_on_loss = yes
				}
				
				# If claimant doesn't have capital, we have to find one first
				if = {
					limit = {
						NOT = { exists = capital_province }
					}
					
					if = {
						limit = {
							scope:kingdom_capital = {
								holder.top_liege = scope:target
							}
						}
						scope:kingdom_capital = {
							change_title_holder = {
								holder = scope:worthy_claimant
								change = scope:change
								take_baronies = yes
							}
						}
					}
					else = {
						scope:target_kingdom = {
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
									holder.top_liege = scope:target
								}
								change_title_holder = {
									holder = scope:worthy_claimant
									change = scope:change
									take_baronies = yes
								}
							}
						}
					}
				}
				
				# Gives kingdom
				scope:target_kingdom = {
					change_title_holder = {
						holder = scope:worthy_claimant
						change = scope:change
						take_baronies = yes
					}
				}
				
				resolve_title_and_vassal_change = scope:change
				
				# Occupies lands in radius of capital
				occupies_close_realm_of_effect = { target = scope:target kingdom = scope:target_kingdom }
				
				# Gives bonuses to help rebuilding
				rebuild_kingdom_pack_effect = yes
			}
		}
		
		# Destroy primary title, free vassals
		destroy_title_free_vassals_effect = { limit_size = tiny_realm_size }
		
		# Ends Horde Invasion story
		if = {
			limit = { any_owned_story = { story_type = story_horde_invasion } }
			every_owned_story = {
				limit = { story_type = story_horde_invasion }
				end_story = yes
			}
		}
	}
}

# Destroy primary title, free vassals
destroy_title_free_vassals_effect = {
	save_temporary_scope_as = target
	
	create_title_and_vassal_change = {
		type = independency
		save_scope_as = independency
		add_claim_on_loss = no
	}
	
	every_vassal = {
		limit = {
			exists = capital_province
			OR = {
				capital_province = { squared_distance = { target = scope:target.capital_province value > squared_distance_small } } #Becomes independent if it's far from target capital
				sub_realm_size >= $limit_size$
			}
		}
		becomes_independent = { change = scope:independency }
	}
	
	resolve_title_and_vassal_change = scope:independency
	
	every_held_title = {
		limit = {
			tier = tier_empire
		}
		scope:target = { destroy_title = prev }
	}
	
	trigger_event = game_rule.2		#Exclave independence
}

# Occupies lands in radius of capital
occupies_close_realm_of_effect = {
	save_temporary_scope_as = actor

	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change
		add_claim_on_loss = yes
	}
	
	$kingdom$.title_capital_county.title_province = { save_temporary_scope_as = kingdom_capital_province }
	
	$target$ = {
		# Finds lands to occupy
		every_realm_province = {
			limit = {
				kingdom = $kingdom$
				province_owner.top_liege = $target$
				squared_distance = { target = scope:kingdom_capital_province value < squared_distance_small }
			}
			
			province_owner = { save_temporary_scope_as = province_owner }
			
			# If it's possible, tries to vassalize holder
			if = {
				limit = {
					scope:actor = { prefers_to_vassalize_trigger = { target = scope:province_owner } }
				}
				scope:province_owner = {
					change_liege = {
						liege = scope:actor
						change = scope:change
					}
				}
			}
			# Otherwise, take land
			else = {
				county = {
					change_title_holder = {
						holder = scope:actor
						change = scope:change
						take_baronies = yes
					}
				}
			}
		}
	}
	
	resolve_title_and_vassal_change = scope:change
}

rebuild_kingdom_pack_effect = {
	add_gold = 500
	
	add_character_modifier = { modifier = rebuilding_kingdom_modifier years = 10 }
	
	spawn_peacekeepers_troops_effect = yes
}

spawn_peacekeepers_troops_effect = {
	if = {
		limit = { exists = capital_province }
		spawn_army = {
			name = peacekeepers_troops
			levies = {
				value = 1000
			}
			men_at_arms = {
				type = pikemen_unit
				stacks = 2
			}
			men_at_arms = {
				type = armored_footmen
				stacks = 2
			}
			men_at_arms = {
				type = bowmen
				stacks = 1
			}
			location = capital_province
		}
	}
}